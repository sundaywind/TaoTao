1.哪个行业赚钱多？
	✔电商行业：
		1）互联网行业的项目中尽可能减少关联查询（并发量大的）。使用冗余来解决表单的关联关系。也有利于分库分表。
		2）条形码、二维码原理：
			扫的时候会触发一个事件，走js会转换为一串数字，数字在数据库里存的商品的信息价格，然后回返。
		3）SKU：
			最小库存量单位。【同一款商品划分出不同的配置。一个SKU对应一款商品的颜色配置都已固定。例：一款手机 有土豪金有黑色、内存有16G 32G 64G，一个黑色64G就是一个SKU】
	✖传统行业：
	
2.电商行业特点：
	1）技术新
	2）技术范围广
	3）分布式
	4）高并发、集群、负载均衡、高可用
	5）海量数据
	6）业务复杂
	7）系统安全

3.电商行业模式：
	B2B：企业到企业，商家到商家。代表：阿里巴巴、慧聪网
	B2C：商家到客户。代表：淘淘商城、京东、淘宝商城（B2B2C）
	C2C：客户到客户。代表：闲鱼
	O2O：线上到线下。代表：实体店商家注册到网上网店
	
4.大纲：
	1）项目工程搭建，框架整合。
	2）后台管理：后台商品分类的展示、分页插件、商品添加、商品类目的选择、图片上传、富文本编辑器、商品规格的实现。
	3）前台系统：搭建、首页商品分类的展示、Jsonp、前台大广告位的展示、商品详情页面的展示、购物车订单系统的实现。
	4）cms系统的实现。
	5）系统添加缓存、Redis、缓存同步。
	6）搜索功能的实现，使用solr实现搜索。
	7）单点登录系统。Session共享。
	8）Nginx，反向代理工具。
	9）Redis集群的搭建、solr集群的搭建。
	10）系统的部署。

5.商城功能（需求）
	会员 可以在商城浏览商品、下订单、以及参加各种活动。
	管理员、运营 可以在平台后台管理系统中管理商品、订单、会员等。
	客服 可以在后台管理系统中处理用户的询问以及投诉。
	
6.一个系统必须有前台（类似现在所有项目），不一定有后台。
	没后台弊端：若前台需要什么功能必须工程师动手，非常不方便。
	有后台管理系统：让不懂技术的也可以操作。（CMS）
	
7.传统项目有什么问题？
	1）模块之间耦合度太高，其中一个升级其他都得升级。
	2）开发困难，各个团队开发最后都要整合一起。
	3）系统的扩展性差。
	4）不能灵活的进行分布式部署。
	✔解决方法-（使用分布式：把系统拆分成多个工程，要完成系统的工程需要多个工程协作完成。这种形式叫做分布式）【使用分布式的架构必须使用Maven工程】
		优点：
			把模块拆分成独立的工程，单点运行。如果某一个点压力大可以对这一个点单独增加配置。其他的点不受影响。
		缺点：
			系统之间交互需要额外的工作量来进行接口的开发。
		
8.技术选型（主要技术）
	Spring、SpringMVC、MyBatis
	JSP、JSTL、jQuery、jQuery plugin、EasyUI、KindEditor（富文本编辑器）、CSS+DIV
	Redis（缓存服务器）
	Solr（搜索）
	httpclient（调用系统服务）
	MySQL
	Nginx（web反向代理服务器）

==========================第1天：后台系统==========================
	
9.后台管理系统工程搭建：
	1）父工程的搭建：父工程是一个pom工程。在父工程中定义规定依赖的jar包的版本信息、插件的版本号。（<dependencyManagement><pluginManagement>不实际依赖，只定义版本）
	2）通用工具类工程：pom.xml Copy父工程中，项目中通用的jar包。
	3）后台管理工程：pom.xml 依赖common工程。要运行工程，需要运行聚合工程也就是taotao-manager，在pom文件中添加Tomcat插件。
	4）pojo：不需要依赖任何。
	5）mapper：要依赖pojo，MyBatis，MySQL，连接池。
	6）service：需要依赖mapper，牵扯到事务 还需要依赖Spring。
	7）web：需要依赖service，跟前端相关的依赖（JSP相关、文件上传组件）

10.项目结构：
	parent			（pom聚合工程）
		common		（jar工程）
		manager		（pom父工程）
			pojo	（jar工程）
			mapper	（jar工程）
			service	（jar工程）
			web		（war工程）*工程中必须有一个war包。

11.启动工程：
	使用maven命令：clean tomcat7:run（tomcat7指定使用tomcat7的插件）
	注意：
		1、需要把taotao-parent工程安装到本地仓库。（Install）
		2、需要把taotao-common安装到本地仓库。

12.框架整合思路：
	Dao层：
		使用MyBatis框架。创建一个mybatis-config.xml（sqlMapConfig.xml）配置文件。
		创建Spring的配置文件：applicationContext-dao.xml配置文件：
			1）配置数据源。
			2）需要让Spring容器管理SqlSessionFactory，单利的存在。
			3）把mapper的代理对象放到Spring容器中，使用包扫描的方式，来加载mapper的代理对象放到Spring中。
	Service层：
		事务管理。
		把Service实现类对象放到Spring容器中。
	Web表现层：
		配置注解驱动。
		配置视图解析器。
		扫描Controller。
	web.xml
		Spring的配置。
		SpringMVC前端控制器的配置。
		post乱码过滤器。	
	这么多配置文件应该放到哪里？
		pom包、jar包，都不能被其他地方引用（/WEB-INF/lib目录）。
		项目最后要打成一个war包，所以配置文件放在war项目中。

12.Spring和SpringMVC父子容器的关系：
	Spring容器【Service+Dao】
	SpringMVC容器【Controller】（是Spring容器的子容器）
	===子容器可以访问父容器，而父容器不能访问子容器===
	如果都放到Spring容器中，springmvc.xml中就不做Controller包的扫描，结果呢？
		请求的时候会发现一个Controller都没有，组件加载的时候会发现没有处理器，处理器的映射关系会建立不起来，必须把Controller放入到自己的SpringMVC容器中才能运行。
		但可以把Service、Dao、Controller都扫描到SpringMVC容器中。但为了扩展不建议这么干！
		事务必须配置到Spring容器，事务管理器不能访问Controller。
		
13.测试整合结果：
	需求：根据商品ID，查询商品信息。
						
14.商品列表实现 需要：
	1）创建数据库。
	2）使用MyBatis的逆向工程生成代码。
	3）框架整合。（SpringMVC+Spring+MyBatis）
	4）商品列表的实现。

15.MyBatis的PageHelper分页插件：
	1）使用：
		第一步：引入pageHelper的jar包。
		第二步：需要在SqlMapConfig.xml中配置插件。
			<?xml version="1.0" encoding="UTF-8" ?>
			<!DOCTYPE configuration
					PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
					"http://mybatis.org/dtd/mybatis-3-config.dtd">
			<configuration>
				<!-- 配置分页插件 -->
				<plugins>
					<plugin interceptor="com.github.pagehelper.PageHelper">
						<!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->        
			        	<property name="dialect" value="mysql"/>
					</plugin>
				</plugins>
			</configuration>
		第三步：在查询的sql语句执行之前，添加一行代码：
			PageHelper.startPage(1, 10);
			第一个参数是page，要显示第几页。
			第二个参数是rows，没页显示的记录数。
		第四步：取查询结果的总数量。
			创建一个PageInfo类的对象，从对象中取分页信息。
	2）测试：
		public class TestPageHelper {
			@Test
			public void testPageHelper() {
				// 创建一个spring容器
				@SuppressWarnings("resource")
				ApplicationContext applicationContext = new ClassPathXmlApplicationContext("classpath:spring/applicationContext-*.xml");
				// 从spring容器中获得Mapper的代理对象
				TbItemMapper mapper = applicationContext.getBean(TbItemMapper.class);
				// 执行查询，并分页
				TbItemExample example = new TbItemExample();
				// 分页处理
				PageHelper.startPage(2, 10); // 参数是：当前页，每页显示的条数
				List<TbItem> list = mapper.selectByExample(example);
				// 取商品列表
				for (TbItem tbItem : list) {
					System.out.println(tbItem.getTitle());
				}
				// 取分页信息
				PageInfo<TbItem> pageInfo = new PageInfo<>(list);
				long total = pageInfo.getTotal();
				System.out.println("共有商品：" + total);
			}
		}

16.商品列表的实现：
	1）15已经引入了PageHelper；
	2）实现商品列表：
		1、请求的url：/item/list
		2、请求的参数：http://localhost:8080/item/list?page=1&rows=30	分页信息。（需要看官方的手册）
		3、返回值。Json数据。数据格式：
			Easyui中datagrid控件要求的数据格式为：
				{total:”2”,rows:[{“id”:”1”,”name”,”张三”},{“id”:”2”,”name”,”李四”}]}
	3）需要实现返回的Json数据，可以创建一个POJO 两个属性 一个total 一个rows（List），使用@ResponeBoby注解 直接可以返回，而这POJO是一个通用的 所以放在common工程中。
	4）Service层：封装处理好的分页list到Page类中。
	5）Controller层：接收页面传递过来的两个参数（pageNo、rows），返回JSON格式的数据。
	6）jsp已经写好，没写。

17.后台管理商品的添加功能：
	1、商品分类选择
	2、上传图片
	3、富文本编辑器（kindEditor）
	4、实现商品的添加
	5、课后作业（商品的修改、删除）
	6、商品描述信息添加
	7、商品规格添加

17.1、商品类目选择：
	1）使用EasyUI的异步Tree控件，提高性能。（异步：展示1级全部菜单 当点开1级节点的时候，才去请求查询 2级菜单，是根据1级菜单的状态改变判断的）
	2）思路：
		url:'/item/cat/list' --- 取父节点
		返回一个JSON格式的数据
	3）实现：
		Dao层：
			SQL语句：SELECT * FROM `tb_item_cat` where parent_id=父节点id;
			单表查询，可以使用 逆向工程生成的代码。
		Service层：
			接收一个参数（类目表的parent_id）
			根据parent_id查询子节点类目列表
			返回一个分类列表（创建POJO[包含：id,text,state] 描述节点）【因为其他工程也有可能用到这个POJO，所以应该放到common工程中】
		
17.2、上传图片：
	图片保存的位置：
		数据库：保存到数据库 可以，太慢了。数据库一般存图片的位置路径。
		传统项目（传统图片管理方式）：
			Tomcat
				|-webapp
					|-taotao-manager
						|-WEB-INF
							|-jsp
							|-js
							|-image
		并发量变高：
			添加服务器，做Tomcat集群。
			集群环境存在的问题：有时能访问，有时不能访问。（负载均衡服务器 ---> 上传在Tomcat1，查看的时候是Tomcat2提供服务）
			解决办法：
				1）共享图片文件夹
				2）图片服务器 ：专门的服务器。IP地址或者域名。
					1.需要一个http服务器可以使用apache、Nginx。
					2.使用ftp【文件传输协议（File Transfer Protocol）】服务 将图片上传。
					3.使用Linux自带的ftp服务器：vsftpd。
		搭建ftp图片服务器：
			1）需要的软件：
				- Linux CenOS6.4
				- Nginx
				- Vsftpd
			2）需要两个服务：
				- http服务
				- ftp 服务
17.3、富文本编辑器：
	怎么用？
		1）页面先引入富文本编辑器的js（kindeditor-4.1.10）。
			<script type="text/javascript" charset="utf-8" src="/js/kindeditor-4.1.10/kindeditor-all-min.js"></script>
			<script type="text/javascript" charset="utf-8" src="/js/kindeditor-4.1.10/lang/zh_CN.js"></script>
		2）在jsp中添加<textarea style="width:800px;height:300px;visibility:hidden;" name="desc"></textarea>域。
		3）初始化富文本编辑器。
			//页面初始化完毕后执行此方法
			$(function(){
				//创建富文本编辑器
				/*         /js/kindeditor-4.1.10/common.js     选择器                      */
				itemAddEditor = TAOTAO.createEditor("#itemAddForm [name=desc]");
				//初始化类目选择和图片上传器
				TAOTAO.init({fun:function(node){
					//根据商品的分类id取商品 的规格模板，生成规格信息。第四天内容。
					//TAOTAO.changeItemParam(node, "itemAddForm");
				}});
			});
		4）在提交表单前，将富文本编辑器的内容和表单中的<textarea> 同步。
			//同步文本框中的商品描述
			itemAddEditor.sync();
		5）表单提交。
17.4、实现商品的添加：
	1）提交按钮：
		<a href="javascript:void(0)" class="easyui-linkbutton" onclick="submitForm()">提交</a>
	2）有效性验证 POST请求：
		//提交表单
		function submitForm(){
			//有效性验证
			if(!$('#itemAddForm').form('validate')){
				$.messager.alert('提示','表单还未填写完成!');
				return ;
			}
			//取商品价格，单位为“分”
			$("#itemAddForm [name=price]").val(eval($("#itemAddForm [name=priceView]").val()) * 100);
			//同步文本框中的商品描述
			itemAddEditor.sync();
			//ajax的post方式提交表单
			/*$("#itemAddForm").serialize()将表单序列号为key-value形式的字符串*/
			$.post("/item/save",$("#itemAddForm").serialize(), function(data){
				if(data.status == 200){
					$.messager.alert('提示','新增商品成功!');
				}
			});
		}
	3）响应的内容：可以自定义。TaotaoResult.java
	4）Dao层：
		单表操作，使用逆向生成的代码。
	5）Service层：
		接收POJO 把POJO内容补全【ID（使用ID工具类）、设置状态、创建时间（当前时间）、修改时间（当前时间）】
		把商品写到tb_item中，返回TaotaoResult。
	6）Controller层：
		接收表单内容，用POJO接收。
		调用Service。
		返回TaotaoResult对象（JSON格式）
17.6、商品描述信息添加：
	Dao层：单表 可以用逆向生成的Mapper。
	Service层：需要跟商品添加在同一事务中，Spring中 只要抛异常 会自动回滚。
	Controller：接收商品信息（POJO），接收商品描述信息（String）。
17.7、商品规格添加：
	为什么商品类目在商品添加中实现了，在规格参数中也好使？
			完整页面：有<html>
			html片段：没<html>
		商品添加是完整的html，已经实现了 做了ajax请求，而规格参数是<div>代码片段。既没刷新网页，也没做切换，在同一页面 在引入的同样生效。
	1）什么是商品规格？
		打开京东--商品--规格
		规律：【分组：主体、屏幕、网络 ...；规格项：是规格下面的详细介绍】
			1.同一类商品的分组是相同的
			2.同一类商品的规格项类似的
			3.不同分类的商品规格项是不同的
			4.不同商品规格参数的值是不同的
	2）想要展示到页面上，先必须的存储起来？
		实现方案（怎么存）：
			1.方案一 --- 使用数据库（多表）来存储：
				建表【太复杂】：
					1、每一商品有多个分组
					2、每一分组下面有多个规格项
					3、每一商品对应不同的规格参数
				存在的问题【太麻烦】：
					1、需要创建多张表来描述规格参数之间的关系。
					2、查询时需要复杂的SQL语句查询。
					3、规格参数数据是商品信息的几十倍，数据量十分庞大，查询时效率很低。
					4、如果要求新添加的商品规格项发生变化，之前的商品规格不变，是不能实现的。
			2.方案二 --- 
				使用模板思路：
					1、创建模板（根据规律）：
						每一个商品分类对一个规格参数模板。
						[
						    {
						        "group": "主体",  //组名称
						        "params": [ // 记录规格成员
						            "品牌",
						            "型号",
						            "颜色",
						            "上市年份",
						            "上市月份"
						        ]
						}，
						{
						        "group": "网络",  //组名称
						        "params": [ // 记录规格成员
						            "4G",
						            "3G,
						            "2G"
						        ]
						}
						
						]
					2.使用模板：
						1、每个商品对应唯一的规格参数。在添加商品时，可以根据规格参数的模板。生成一个表单。
						2、保存规格参数时，还可以生成规格参数的JSON（数组形式）数据。
							[
							    {
							        "group": "主体",
							        "params": [
							            {
							                "k": "品牌",
							                "v": "苹果（Apple）"
							            },
							            {
							                "k": "型号",
							                "v": "iPhone 6 A1589"
							            },
										{
							                "k": "智能机",
							                "v": "是 "
							            }
							        ]
								}
							]
						3、保存到数据库。
					实现流程：
						1、生成模板
						2、读取模板
						3、生成表单
						4、根据表单生成规格参数信息（JSON数组）
						5、写进数据库
						6、展示的时候把规格参数取出来展示给用户
					优缺点：
						优点：
							1、不需要做多表关联。
							2、如果新添加的商品规格项发生改变，之前的商品不变。
						缺点:
							复杂的表和json之间的转换。对js的编写要求很高。
					商品类目添加模板：
						逻辑：
							选择商品分类后根据选择的商品分类到tb_item_param规格参数模板表中取规格模板，
							取到了说明此商品分类的规格模板已经添加 提示不能添加。	
							如果没有则正常添加模板。
					规格参数模板提交：
						逻辑：
							首先把页面中所有文本框中的内容转换成json数据。
							把json字符串提交后台，保存到规格参数表中。
	3）根据规格参数模板生成表单：
		在商品添加功能中，读取此商品对应的规格参数，生成表单，供使用者添加规格参数。
	4）	保存商品的规格参数：
		表单提交之前，先将规格参数表单中的内容转换成json数据然后跟商品基本信息、商品描述信息同时提交后台，保存至数据库。
	5）商品规格展示：
		当现实商品详情页面时，需要把商品的规格参数根据商品id取出来，生成html展示到页面。
		生成html有技巧：
			从页面拷贝的表单代码，先格式化（Sublime Text），在Navicat选中右键Java/C，会转换成拼接好的代码。
==========================第5天：前台系统==========================
18.知识点内容：

19.前台系统搭建：
	1、前台系统就是商品网站。
	2、前台系统和后台系统只是有数据库层的关系，两个用的同一个数据库。
	3、要展示网页，就是一个Web工程，搭建一个Web工程 可以搭建一个动态Web工程或者Maven war工程。
	4、有一个问题，后台管理系统、PC端、微信端（只是嵌套了一个浏览器 跟PC端一样）、Android端、IOS端，这么多端口怎么搭建？
		（这几个都是用的同一数据库）【其中各种端都需要后台支撑，而且后台逻辑都是一样的】
		都是调用同一个服务（同一套代码），是不是可以发布一个相同的服务，让这些端来调用。也便于维护。
			优点：
				1、前台系统和服务层可以分开，降低系统耦合度。
				2、开发团队可以分开，提高开发效率。
				3、系统分开可以灵活的进行分布式部署。
			缺点：
				传统项目只是调方法就行。但分布式 服务之间通信使用接口通信，开发工作量提高。
	5、前台系统分为两部分（架构）：
		服务层：Web工程，功能就是发布服务。
			服务层工程搭建：
				使用Maven创建一个war工程。
				使用到的技术：
					MyBatis（连接数据库）
					Spring
					SpringMVC（发布服务）【C#f发布WebService】
				框架整合：
					参考taotao-manager整合（拷贝）
					添加Tomcat插件：8081
		表现层：展示页面，没有业务逻辑（所有逻辑就是调用服务层发布的的服务）。
			门户：入口，对于网站来说就是首页。
			门户系统搭建：
				使用到的技术（不连数据库，只调服务）：
					Spring
					SpringMVC
					jstl
					jQuery
					需要调用服务端，使用httpClient（作用是：使用java代码模拟浏览器）
				创建工程：rest ---> Maven
					pom.xml
					web.xml
					框架整合：
						参考taotao-manager-web
					配置Tomcat插件：portal需要调用rest服务，需要一块启动才行。
					添加jsp页面和静态资源文件：
						静态资源文件需要放在WEB—INF目录外
						jsp放在里面。
	6、商品分类展示：（首页左侧有一个商品分类。当鼠标分类上，需要展示出此分类下的子分类）
		1.jax跨域请求
			跨域问题：Js是不能跨域请求。出于安全考虑，js设计时不可以跨域。
			什么是跨域：（可以使用jsonp解决跨域问题）
				1、域名不同时。
				2、域名相同，端口不同。
				3、只有域名相同、端口相同时，才可以访问。
			什么是jsonp？
				Jsonp其实就是一个跨域解决方案。
				Js跨域请求数据是不可以的，但是js跨域请求js脚本是可以的。
				可以把数据封装成一个js语句，做一个方法的调用。
				跨域请求js脚本可以得到此脚本。
				得到js脚本之后会立即执行。
				可以把数据做为参数传递到方法中。
				就可以获得数据。
				从而解决跨域问题。
			jsonp的原理：
				浏览器在js请求中，是允许通过script标签的src跨域请求，可以在请求的结果中添加回调方法名，在请求页面中定义方法，既可获取到跨域请求的数据。
		2.@JsonProperty("n")
			标志转换为json数据之后，它的K值是什么，默认是属性名，标注了的话 用标注的名称。
		3.MappingJacksonValue类：
			Spring4.1版本后，自带了一个工具类 MappingJacksonValue：jsonp调用服务包装的方法。
==========================第6天：CMS（Content Management System的缩写，意为"内容管理系统"。）==========================
20.CSM系统实现：
	1）内容分析：找管理内容的共性（展示的内容有几大块），然后确定内容的分类（树形视图：添加、删除、重命名 功能），再实现分类后的内容管理。
	2）内容分类实现（新增）：
		Dao层：因为是单表查询，可以使用生成的代码。
		Service层：
			逻辑：接收parentid。根据parentid查询节点列表，返回返回一个EasyUI异步Tree要求的节点列表。每个节点包含三个属性id、text、state三个属性。可以使用EUTreeNode。
			参数：id
			返回值：List<EUTreeNode>
		Controller层：接收页面传递过来的parentid，根据parentid查询节点列表。返回List<EUTreeNode>。需要响应json数据。
	3）内容分类--删除、重命名【自己完了补全】		
	4）
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		